{"version":3,"sources":["components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","onSearch","className","App","props","findResult","setState","clicked","fetch","then","res","json","data","console","log","PDPsum","ACN","DPP","PPA","CDC","JP","ANPP","LABOUR","CPP","PDP","forEach","e","state","search","outcome","results","push","this","result","map","party_abbreviation","party_score","date_entered","user_ip_address","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAaeA,G,kBAVA,SAAC,GAAe,EAAdC,SAGb,OACI,yBAAKC,UAAU,UACX,2CACA,2FCiIGC,E,YApIb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAuCRC,WAAa,WACX,EAAKC,SAAS,CAACC,SAAS,IACxBC,MAAM,uCAAuCC,MAAK,SAAAC,GAC9C,OAAOA,EAAIC,UAGVF,MAAK,SAAAG,GACNC,QAAQC,IAAIF,GAOV,IAAIG,EAAS,EACTC,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAK,EACLC,EAAO,EACPC,EAAS,EACTC,EAAM,EACZX,EAAKY,IAAIC,SAAQ,SAAAC,GACfX,GAAUW,EACV,EAAKpB,SAAS,CAACkB,IAAKT,IACpBC,GAAOU,EACP,EAAKpB,SAAS,CAACU,IAAKA,IACpBC,GAAOS,EACP,EAAKpB,SAAS,CAACW,IAAKA,IACpBC,GAAOQ,EACP,EAAKpB,SAAS,CAACY,IAAKA,IACpBC,GAAOO,EACP,EAAKpB,SAAS,CAACa,IAAKA,IACpBC,GAAMM,EACN,EAAKpB,SAAS,CAACc,GAAIA,IACnBC,GAAQK,EACR,EAAKpB,SAAS,CAACe,KAAMA,IACrBC,GAAUI,EACV,EAAKpB,SAAS,CAACgB,OAAQA,IACvBC,GAAOG,EACP,EAAKpB,SAAS,CAACiB,IAAKA,OAEtBV,QAAQC,IAAI,EAAKa,WAjFrB,EAAKA,MAAQ,CACXC,OAAQ,GACRC,QAAS,GACTL,IAAK,EACLP,IAAK,EACLD,IAAK,EACLE,IAAK,EACLC,IAAK,EACLC,GAAI,EACJC,KAAM,EACNC,OAAQ,EACRC,IAAK,EACLhB,SAAS,GAdK,E,iFAkBE,IAAD,OACjBC,MAAM,2CAA2CC,MAAK,SAAAC,GACpD,OAAOA,EAAIC,UAGVF,MAAK,SAAAG,GACN,IAAMkB,EAAU,GAChBjB,QAAQC,IAAIF,GACZA,EAAKa,SAAQ,SAAAC,GACXI,EAAQC,KAAKL,MAEf,EAAKpB,SAAS,CAACuB,QAASC,OAExBjB,QAAQC,IAAIkB,KAAKL,MAAME,eAAgBG,KAAKL,MAAME,W,+BA2DpD,IAAMI,EAASD,KAAKL,MAAME,QAAQK,KAAI,SAAAR,GAClC,OACE,yBAAKxB,UAAU,UACb,uBAAGA,UAAU,SAASwB,EAAES,oBACxB,sCAAYT,EAAEU,aACd,0CAAgBV,EAAEW,cAClB,2CAAiBX,EAAEY,qBAK3B,OACE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACZ+B,GAGDD,KAAKL,MAAMpB,QACT,yBAAKL,UAAU,gBACf,mCAAS8B,KAAKL,MAAMH,KACpB,mCAASQ,KAAKL,MAAMV,KACpB,mCAASe,KAAKL,MAAMX,KACpB,mCAASgB,KAAKL,MAAMT,KACpB,mCAASc,KAAKL,MAAMR,KACpB,kCAAQa,KAAKL,MAAMP,IACnB,oCAAUY,KAAKL,MAAMN,MACrB,sCAAYW,KAAKL,MAAML,QACvB,mCAASU,KAAKL,MAAMJ,MACf,KAET,4BAAQgB,QAASP,KAAK3B,YAAtB,qCACA,+E,GA5HQmC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,iB","file":"static/js/main.f9a4840b.chunk.js","sourcesContent":["import React from 'react'\nimport './head.css'\n\nconst Header = ({onSearch}) => {\n\n\n    return (\n        <div className=\"header\">\n            <h1>BINCOM test</h1>\n            <p>SHOWING RESULTS FOR PULLING UNIT WITH UNIT UNIQUE ID OF 8</p>\n        </div>\n    )\n}\nexport default Header","import React, {Component} from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css'\nimport Header from './components/Header/Header';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      search: '',\n      outcome: [],\n      PDP: 0,\n      DPP: 0,\n      ACN: 0,\n      PPA: 0,\n      CDC: 0,\n      JP: 0,\n      ANPP: 0,\n      LABOUR: 0,\n      CPP: 0,\n      clicked: false\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://bincomapi.herokuapp.com/results').then(res=>{\n      return res.json()\n    \n      \n    }).then(data=>{\n      const results = []\n      console.log(data)\n      data.forEach(e => {\n        results.push(e)\n      });\n      this.setState({outcome: results})\n    })\n      console.log(this.state.outcome, typeof(this.state.outcome))\n      \n      // this.setState({outcome: results})\n\n      \n    \n  }\n\n \n  findResult = () => {\n    this.setState({clicked: true})\n    fetch('https://bincomapi.herokuapp.com/pdp').then(res=>{\n        return res.json()\n    \n      \n      }).then(data=>{\n        console.log(data)\n        // let sum = 0\n        // data.forEach((e, i)=>{\n        //   sum += e\n        //   console.log(sum)\n        // })\n\n          let PDPsum = 0\n          let ACN = 0\n          let DPP = 0\n          let PPA = 0\n          let CDC = 0\n          let JP = 0\n          let ANPP = 0\n          let LABOUR = 0\n          let CPP = 0\n        data.PDP.forEach(e=>{\n          PDPsum += e\n          this.setState({PDP: PDPsum})\n          ACN += e\n          this.setState({ACN: ACN})\n          DPP += e\n          this.setState({DPP: DPP})\n          PPA += e\n          this.setState({PPA: PPA})\n          CDC += e\n          this.setState({CDC: CDC})\n          JP += e\n          this.setState({JP: JP})\n          ANPP += e\n          this.setState({ANPP: ANPP})\n          LABOUR += e\n          this.setState({LABOUR: LABOUR})\n          CPP += e\n          this.setState({CPP: CPP})\n        })\n        console.log(this.state)\n\n      })\n  }\n\n  render(){\n   \n    const result = this.state.outcome.map(e=>{\n        return (\n          <div className=\"result\">\n            <p className=\"party\">{e.party_abbreviation}</p>\n            <p>SCORE:  {e.party_score}</p>\n            <p>DATE/TIME:  {e.date_entered}</p>\n            <p>IP ADDRESS:  {e.user_ip_address}</p>\n          </div>\n        )\n      \n    })\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header/>\n          <div className=\"results\">\n            {result}\n          </div>\n          {\n            this.state.clicked?\n              <div className=\"unit_results\">\n              <p>PDP: {this.state.PDP}</p>\n              <p>DPP: {this.state.DPP}</p>\n              <p>ACN: {this.state.ACN}</p>\n              <p>PPA: {this.state.PPA}</p>\n              <p>CDC: {this.state.CDC}</p>\n              <p>JP: {this.state.JP}</p>\n              <p>ANPP: {this.state.ANPP}</p>\n              <p>LABOUR: {this.state.LABOUR}</p>\n              <p>CPP: {this.state.CPP}</p>\n            </div>:null\n          }\n          <button onClick={this.findResult}>SHOW RESULT FOR ALL PULLING UNITS</button>\n          <footer>\n            &copy; By Ashraf. Powered by Bincon dev\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}